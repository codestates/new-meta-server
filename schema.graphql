type Like {
  id: String!
  createdAt: DateTime!
  user: User!
  post: Post!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type Post {
  id: String!
  champion: String!
  title: String!
  description: String!
  skills: String!
  play: String!
  etc: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  numberOfLikes: Float
  user: User!
  likes: [Like!]
}

type Follow {
  id: String!
  createdAt: DateTime!
  subject: User!
  target: User!
}

type User {
  id: ID!
  nickname: String!
  email: String!
  accountType: String!
  posts: [Post!]
  likes: [Like!]
  subject: [Follow!]
  target: [Follow!]
}

type CreateFollowResponseType {
  subject: User!
  target: User!
}

type CreateLikeResponseType {
  post: Post!
  user: User!
  like: [Like!]!
}

type ReadMyLikesResponseType {
  user: User!
  likes: [Like!]!
}

type CreatePostResponseType {
  champion: String!
  title: String!
  description: String!
  skills: String!
  play: String!
  etc: String!
  user: User!
}

type UpdatePostResponseType {
  post: Post!
  user: User!
}

type ReadOthersPostsByResponseType {
  posts: [Post!]!
  user: User!
}

type RegisterResponseType {
  id: String!
  email: String!
  nickname: String!
}

type LoginResponseType {
  token: String!
  user: User
}

type LogoutResponseType {
  token: String!
  message: String!
  user: User!
}

type MyinfoResponseType {
  user: User!
  posts: [Post!]
  likes: [Like!]
  followings: [Follow!]
  followers: [Follow!]
}

input CreatePostInputType {
  champion: String!
  title: String!
  description: String!
  skills: String!
  play: String!
  etc: String!
}

input UpdatePostInputType {
  id: String!
  champion: String
  title: String
  description: String
  skills: String
  play: String
  etc: String
}

input RegisterInputType {
  nickname: String!
  email: String!
  password: String!
}

input LoginInputType {
  email: String!
  password: String!
}

input UpdatePasswordType {
  currentPassword: String!
  newPassword: String!
}

type Query {
  readWhomIFollow: [Follow!]!
  readWhoFollowsMe: [Follow!]!
  readMyLikes: ReadMyLikesResponseType!
  readMyPosts: [Post!]!
  readOthersPostsByEmail(email: String!): ReadOthersPostsByResponseType
  readOthersPostsByNickname(nickname: String!): ReadOthersPostsByResponseType
  fetchAllPostsOrderByCreatedAt: [Post!]
  fetchAllPostsOrderByLikes: [Post!]
  hello: String!
  myInfo: MyinfoResponseType!
  userInfo(userId: String!): MyinfoResponseType!
}

type Mutation {
  createFollow(targetId: String!): CreateFollowResponseType!
  deleteFollow(targetId: String!): Boolean!
  createLike(postId: String!): CreateLikeResponseType!
  deleteLike(postId: String!): Boolean!
  createPost(data: CreatePostInputType!): CreatePostResponseType!
  updatePost(data: UpdatePostInputType!): UpdatePostResponseType!
  deletePost(postId: String!): Boolean
  register(data: RegisterInputType!): RegisterResponseType!
  login(data: LoginInputType!): LoginResponseType!
  logout: LogoutResponseType!
  changePassword(data: UpdatePasswordType!): User
  deleteAccount(password: String!): Boolean
  changeNickname(newNickname: String!): User!
}
